version: 2

general:
# Uncomment the following to specify only a specific branch
#   branches:
#     only:
#       - dev # specific branch
#       - /dev-.*/ # or regexes

jobs:
  build:
    machine: true
    no_output_timeout: 30m
    working_directory: ~/ci_app
    environment:
      # from https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli_standalone.htm
      # and https://developer.salesforce.com/media/salesforce-cli/manifest.json
      - DX_CLI_URL: https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
      - SV_PACKAGE_VERSION_ID: 04t10000000r5i4AAA   # SV 2.0.4
      - SV_INSTALL_KEY: sb201902
    steps:
      - checkout
      - run:
          name: File List
          command: |
            ls -l -R
            df -hT
      - run:
          name: Download CLI
          command: |
            mkdir sfdx
            wget -qO- $DX_CLI_URL | tar xJ -C sfdx --strip-components 1
      - run:
          name: Install CLI
          command: |
            ./sfdx/install
            sfdx
            mkdir tmp
      - run:
          name: Create hub key
          command: |
            echo 'make hub key'
            #- mkdir keys
            #- echo $HUB_SERVER_KEY_HEX | xxd -r -ps >> keys/hub.key
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
            #- openssl rsa -in keys/hub.key -check -noout
          ### Uncomment the following if performing deployments
          #- echo 'make deploy key'
          #- echo $DEPLOY_SERVER_KEY_HEX | xxd -r -ps >> keys/deploy.key
          #- openssl rsa -in keys/deploy.key -check -noout
          #- sfdx force:auth:jwt:grant --clientid $DEPLOY_CONSUMER_KEY --jwtkeyfile keys/deploy.key --username $DEPLOY_SFDC_USER -a deploy
      - run:
          name: Setup Org
          command: |
            echo 'Running tests'
            sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile assets/server.key --username $HUB_SFDC_USER --setdefaultdevhubusername -a DevHub
            sfdx force --help
            sfdx force:org:list
            sfdx force:limits:api:display -u DevHub
            # sfdx force:org:create -s -f ~/ci_app/config/project-scratch-def.json -a circle_build_$CIRCLE_BUILD_NUM --wait 3
            sfdx force:org:create -f ~/ci_app/config/project-scratch-def.json -a circle_build_test -s -d 1 --wait 5
            sfdx force:user:create --setalias admin-user profileName=システム管理者
            sfdx force:user:password:generate --targetusername admin-user
            sfdx force:user:display --targetusername admin-user
            sfdx force:package:install --package $SV_PACKAGE_VERSION_ID --installationkey $SV_INSTALL_KEY --securitytype AllUsers --wait 6
            sfdx force:source:push -u circle_build_test
      - run:
          name: Run Apex Tests
          command: |
            echo 'Running Apex Tests'
            # sfdx force:user:permset:assign --permsetname SmartViscaCITestUser
            mkdir -p ~/test-results/junit
            sfdx force:apex:test:run -c -d ~/test-results/junit -r junit --wait 5
      - store_test_results:
          path: ~/test-results
      - run:
          name: Delete Useless Scratch Org
          command: |
            # sfdx force:org:delete -u circle_build_$CIRCLE_BUILD_NUM -p
            sfdx force:org:delete -u circle_build_test -p

### Uncomment the following if performing deployments
#deployment:
#  override:
#    - sfdx force:source:convert -r force-app -d testDeploy
#    - . cleanupDeploy.sh
#    - sfdx force:mdapi:deploy -d testDeploy/ -u deploy -w 2
####################################################################################################
## JOB:     create-beta-package
## PURPOSE: Deploys successfully built and tested code to the packaging org so it can be prepped
##          for a new BETA package version upload.
####################################################################################################
  create-beta-package:
    docker:
      - image: ncino/ci-sfdx
    environment:
      - PACKAGE_NAME:         "OrgTreeDX"                      # Name of your managed package
      - PACKAGE_VERSION_NAME: "June 2020"                 # Version Name for your managed package
      - METADATA_PACKAGE_ID:  "0337F000000l0TYQAY"            # パッケージ ID Metadata Package ID (always begins with 033)
    steps:
      - checkout                  # Required step.  Checks out the code from your repository.
      - attach_workspace:
          at: /tmp/sfdx-keys      # Attaches the workspace where our private key files were stored.
      - run:
          name: Display version info for the Salesforce CLI and core plugins (will force updates if needed)
          command: |
            sfdx version          # Output the version of the CLI
            sfdx plugins --core   # Output the version of the core plugins
      - run:
          name: Authenticate the Salesforce CLI to the Packaging Org using JWT
          command: |
            sfdx force:auth:jwt:grant -i 3MVG9G9pzCUSkzZu6eE1LwJ4a6ucKQW3nDxLTUqCMvOd8u2hkBIV.EVTfUMJb26cEzZoDnaWOzeFUYBwrKWQU \
                                      -f /tmp/sfdx-keys/pkg-org.key \
                                      -u $PKGORG_SFDC_USERNAME \
                                      -d \
                                      -a PkgOrg
      - run:
          name: List current version history for the first-generation package about to be uploaded
          command: |
            #### List version info for all first-gen packages
            ## sfdx force:package1:version:list
            # -u --TARGETUSERNAME           Optional. A username or alias for the target org. Overrides the default target org.
            # -i --PACKAGEID                Optional. ID of the metadata package (starts with 033) we want version info from.
            #    --LOGLEVEL                 Optional. The logging level for this command invocation.
            sfdx force:package1:version:list  -u PkgOrg \
                                              -i $METADATA_PACKAGE_ID \
                                              --loglevel error
      - run:
          name: Create (upload) a new MANAGED BETA package version
          command: |
            sfdx force:package1:version:create  -i $METADATA_PACKAGE_ID \
                                                -n "$PACKAGE_VERSION_NAME" \
                                                -d "Package version generated by CI process" \
                                                -u PkgOrg \
                                                -w 15 \
                                                --loglevel error
      # Store SFDX logs as artifacts
      - store_artifacts:
          path: ~/.sfdx/sfdx.log
          destination: sfdx-logs

####################################################################################################
## WORKFLOW:  build_and_test
## PURPOSE:   Primary workflow used by the CI process.
####################################################################################################
# workflows:
#   version: 2
#   build_and_test:
#     jobs:
#       - build:
#           context: org-master
#           filters:
#             branches:
#               only:
#                 - master
#   create_beta_package:
#     jobs:
#       - create-beta-package:
#           context: org-preproduction
#           filters:
#             branches:
#               only:
#                 - pre-production
#END-OF-CONFIG-FILE#
