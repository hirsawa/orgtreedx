version: 2

general:
# Uncomment the following to specify only a specific branch
#   branches:
#     only:
#       - dev # specific branch
#       - /dev-.*/ # or regexes

jobs:
  build:
    docker:
      - image: ncino/ci-sfdx
    # machine: true
    no_output_timeout: 30m
    working_directory: ~/ci_app
    environment:
      # from https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli_standalone.htm
      # and https://developer.salesforce.com/media/salesforce-cli/manifest.json
      - DX_CLI_URL: https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
      - SV_PACKAGE_VERSION_ID: 04t10000000r5i4AAA   # SV 2.0.4
      - SV_INSTALL_KEY: sb201902
    steps:
      - checkout
      -run:
        name: Display version info for the Salesforce CLI and core plugins (will force updates if needed)
        command: |
          sfdx version          # Output the version of the CLI
          sfdx plugins --core   # Output the version of the core plugins
      # - run:
      #     name: File List
      #     command: |
      #       ls -l -R
      #       df -hT
      # - run:
      #     name: Download CLI
      #     command: |
      #       mkdir sfdx
      #       wget -qO- $DX_CLI_URL | tar xJ -C sfdx --strip-components 1
      # - run:
      #     name: Install CLI
      #     command: |
      #       ./sfdx/install
      #       sfdx
      #       mkdir tmp
      - run:
          name: Create hub key
          command: |
            echo 'make hub key'
            #- mkdir keys
            #- echo $HUB_SERVER_KEY_HEX | xxd -r -ps >> keys/hub.key
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
            #- openssl rsa -in keys/hub.key -check -noout
          ### Uncomment the following if performing deployments
          #- echo 'make deploy key'
          #- echo $DEPLOY_SERVER_KEY_HEX | xxd -r -ps >> keys/deploy.key
          #- openssl rsa -in keys/deploy.key -check -noout
          #- sfdx force:auth:jwt:grant --clientid $DEPLOY_CONSUMER_KEY --jwtkeyfile keys/deploy.key --username $DEPLOY_SFDC_USER -a deploy
      - run:
          name: Setup Org
          command: |
            echo 'Running tests'
            sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile assets/server.key --username $HUB_SFDC_USER --setdefaultdevhubusername -a DevHub
            sfdx force --help
            sfdx force:org:list
            sfdx force:limits:api:display -u DevHub
            # sfdx force:org:create -s -f ~/ci_app/config/project-scratch-def.json -a circle_build_$CIRCLE_BUILD_NUM --wait 3
            sfdx force:org:create -f ~/ci_app/config/project-scratch-def.json -a circle_build_test -s -d 1 --wait 5
            sfdx force:user:create --setalias admin-user profileName=システム管理者
            sfdx force:user:password:generate --targetusername admin-user
            sfdx force:user:display --targetusername admin-user
            sfdx force:package:install --package $SV_PACKAGE_VERSION_ID --installationkey $SV_INSTALL_KEY --securitytype AllUsers --wait 6
            sfdx force:source:push -u circle_build_test
      - run:
          name: Run Apex Tests
          command: |
            echo 'Running Apex Tests'
            # sfdx force:user:permset:assign --permsetname SmartViscaCITestUser
            mkdir -p ~/junit
            sfdx force:apex:test:run -c -d ~/junit -r junit --wait 5
      - store_test_results:
          path: ~/junit

      - run:
          name: Delete Useless Scratch Org
          command: |
            # sfdx force:org:delete -u circle_build_$CIRCLE_BUILD_NUM -p
            sfdx force:org:delete -u circle_build_test -p
            curl -X POST -H 'Content-type: application/json' \
                --data "{ 'channel': 'test', \
                'text': '${CIRCLE_PROJECT_REPONAME}の${CIRCLE_WORKFLOW_ID}の完了' }" \
                ${SLACK_WEBHOOK}

####################################################################################################
## JOB:     create-dev-scratch-org
## PURPOSE:
####################################################################################################
  create-dev-scratch-org:
    docker:
      - image: ncino/ci-sfdx
    # machine: true
    working_directory: ~/ci_app
    environment:
      # from https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli_standalone.htm
      # and https://developer.salesforce.com/media/salesforce-cli/manifest.json
      - DX_CLI_URL: https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
      - SV_PACKAGE_VERSION_ID: 04t10000000r5i4AAA   # SV 2.0.4
      - SV_INSTALL_KEY: sb201902
    steps:
      - checkout
      - run:
          name: File List
          command: |
            ls -l -R
            df -hT
      - run:
          name: Download CLI
          command: |
            mkdir sfdx
            wget -qO- $DX_CLI_URL | tar xJ -C sfdx --strip-components 1
      - run:
          name: Install CLI
          command: |
            ./sfdx/install
            sfdx
            mkdir tmp
      - run:
          name: Create hub key
          command: |
            echo 'make hub key'
            #openssl enc -nosalt -aes-256-cbc -d -in assets/server_ohno_dev.key.enc -out assets/server_devhub.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
      - run:
          name: Setup Org
          command: |
            echo 'Running SetupOrg'
            # openssl rsa -noout -modulus -in assets/server_devhub.key
            # sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile assets/server_devhub.key --username $HUB_SFDC_USER --setdefaultdevhubusername -a DevHub
            # sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile assets/server_devhub.key --username $HUB_SFDC_USER --setdefaultdevhubusername -a DevHub
            # sfdx force:auth:jwt:grant --clientid 3MVG9n_HvETGhr3BSA_rzJBE7UnubYcnun6IqJaQK5cW.Q.seiY8e1XnleHnDE1deUiNWrLYyQivBRwE8CchW --jwtkeyfile assets/server.key --username aohno+dev@sunbridge.com --setdefaultdevhubusername -a DevHub
            sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile assets/server.key --username $HUB_SFDC_USER --setdefaultdevhubusername -a DevHub
            sfdx force --help
            sfdx force:org:list
            sfdx force:limits:api:display -u DevHub
            sfdx force:data:soql:query -q "SELECT Name,OrgName,ScratchOrg,Description FROM ScratchOrgInfo WHERE status = 'Active' AND OrgName = '$CIRCLE_BRANCH'" -u DevHub | wc -l > scratchorg.cnt
            cat scratchorg.cnt
            SCRATCH_CNT=$(cat scratchorg.cnt)
            echo "scratch:count=${SCRATCH_CNT}"
            echo "'$CIRCLE_BRANCH'"
            echo "${CIRCLE_BRANCH}"
            if [ "${SCRATCH_CNT}" = "1" ]; then
                # sfdx force:org:create -s -f ~/ci_app/config/project-scratch-def.json -a circle_build_$CIRCLE_BUILD_NUM --wait 3
                sfdx force:org:create -f ~/ci_app/config/project-scratch-def.json orgName=$CIRCLE_BRANCH -a dev_scratch_org_$CIRCLE_BUILD_NUM -s -d 30 --wait 5
                #sfdx force:org:create -f ~/ci_app/config/project-scratch-def.json -a dev_scratch_org_$CIRCLE_BUILD_NUM -s -d 30 --wait 5
                sfdx force:package:install --package $SV_PACKAGE_VERSION_ID --installationkey $SV_INSTALL_KEY --securitytype AllUsers --wait 6 -u dev_scratch_org_$CIRCLE_BUILD_NUM
                sfdx force:source:push -u dev_scratch_org_$CIRCLE_BUILD_NUM
                # sfdx force:user:list
                # #sfdx force:user:create --setalias dev-user  --definitionfile config/user-def.json
                # #sfdx force:user:list
                # sfdx force:user:display --targetusername dev_scratch_org_$CIRCLE_BUILD_NUM
                # sfdx force:user:password:generate --targetusername dev_scratch_org_$CIRCLE_BUILD_NUM
                # sfdx force:user:display --targetusername dev_scratch_org_$CIRCLE_BUILD_NUM

                sfdx force:user:create --setalias admin-user profileName=システム管理者
                sfdx force:user:password:generate --targetusername admin-user
                sfdx force:user:display --targetusername admin-user

            else
                echo "ScrachOrg already exists."
            fi
      - run:
          name: Setup Org User
          command: |
            echo 'Running SetupOrgUser'

### Uncomment the following if performing deployments
#deployment:
#  override:
#    - sfdx force:source:convert -r force-app -d testDeploy
#    - . cleanupDeploy.sh
#    - sfdx force:mdapi:deploy -d testDeploy/ -u deploy -w 2
####################################################################################################
## JOB:     create-beta-package
## PURPOSE: Deploys successfully built and tested code to the packaging org so it can be prepped
##          for a new BETA package version upload.
####################################################################################################
  create-beta-package:
    docker:
      - image: ncino/ci-sfdx
    # machine: true
    working_directory: ~/ci_app
    environment:
      # from https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli_standalone.htm
      # and https://developer.salesforce.com/media/salesforce-cli/manifest.json
      - DX_CLI_URL: https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
      - SV_PACKAGE_VERSION_ID: 04t10000000r5i4AAA   # SV 2.0.4
      - SV_INSTALL_KEY: sb201902
      - PACKAGE_NAME:         OrgTreeDX                      # Name of your managed package
      - PACKAGE_VERSION_NAME: June 2020                 # Version Name for your managed package
      - METADATA_PACKAGE_ID:  0337F000000l0TYQAY            # パッケージ ID Metadata Package ID (always begins with 033)
      - PKGORG_CONSUMER_KEY:  3MVG9d8..z.hDcPKBgjW8kzCacTVVugSNMajGtCZmwF_rf4SDo8w3JXoEusjgpIjhZBfRjIjwPL9ic4SeYWFA
      - PKGORG_SFDC_USERNAME: hsawano@sunbridge.ot.01
      - PACKAGE_DIRECTORY:    "./sfdx-source/OrgTreeCmp"  # SFDX package directory that has your code
    steps:
      - checkout
      - run:
          name: File List
          command: |
            ls -l -R
            df -hT
      - run:
          name: Download CLI
          command: |
            mkdir sfdx
            wget -qO- $DX_CLI_URL | tar xJ -C sfdx --strip-components 1
      - run:
          name: Install CLI
          command: |
            ./sfdx/install
            sfdx
            mkdir tmp
      - run:
          name: Create Connected App key
          command: |
            echo 'make app key'
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
      - run:
          name: Display version info for the Salesforce CLI and core plugins (will force updates if needed)
          command: |
            sfdx version          # Output the version of the CLI
            sfdx plugins --core   # Output the version of the core plugins
      - run:
          name: Authenticate the Salesforce CLI to the Packaging Org using JWT
          command: |
            #### Use the pkg-org.key that was created by the setup-build-environment job
            ## sfdx force:auth:jwt:grant
            # -i --CLIENTID                 Required. The OAuth client ID (sometimes referred to as the consumer key)
            # -f --JWTKEYFILE               Required. Path to a file containing the private key
            # -u --USERNAME                 Required. The authentication username.
            # -d --SETDEFAULTDEVHUBUSERNAME Optional. Sets the authenticated org as the default Dev Hub org for scratch org creation.
            # -a --SETALIAS                 Optional. Sets an alias for the authenticated org.
            sfdx force:auth:jwt:grant -i $PKGORG_CONSUMER_KEY \
                                      -f assets/server.key \
                                      -u $PKGORG_SFDC_USERNAME \
                                      -d \
                                      -a PkgOrg
            # sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile assets/server.key --username $HUB_SFDC_USER --setdefaultdevhubusername -a DevHub
            # sfdx force:auth:jwt:grant --clientid "$PKGORG_CONSUMER_KEY" --jwtkeyfile "assets/server.key" --username "$PKGORG_SFDC_USERNAME" --setdefaultdevhubusername -a PkgOrg
            # sfdx force:auth:jwt:grant -i "3MVG9d8..z.hDcPKBgjW8kzCacTVVugSNMajGtCZmwF_rf4SDo8w3JXoEusjgpIjhZBfRjIjwPL9ic4SeYWFA" -f "assets/server.key" -u "hsawano@sunbridge.ot.01" -d -a PkgOrg
      - run:
          name: Convert SFDX source to MDAPI source
          command: |
            #### Convert SFDX source to MDAPI source so it can be deployed to the Packaging Org
            ## sfdx force:source:convert
            # -r --ROOTDIR                  Optional. The directory that contains the source to convert.
            # -d --OUTPUTDIR                Optional. The output directory to export the Metadata API source to.
            # -n --PACKAGENAME              Optional. The name of the package to associate with the Metadata API source.
            #    --LOGLEVEL                 Optional. The logging level for this command invocation.
            sfdx force:source:convert -r "$PACKAGE_DIRECTORY" \
                                      -d "./mdapi-source/circle_build_$CIRCLE_BUILD_NUM" \
                                      -n "$PACKAGE_NAME" \
                                      --loglevel error
      - run:
          name: Deploy MDAPI Source to the Packaging Org
          command: |
            #### Deploy the newly converted MDAPI Source to the Packaging Org
            ## sfdx force:mdapi:deploy
            # -d --DEPLOYDIR                Optional. The root of the directory tree that contains the files to deploy.
            # -l --TESTLEVEL                Optional. Specifies which level of deployment tests to run.
            # -u --TARGETUSERNAME           Optional. A username or alias for the target org. Overrides the default target org.
            # -w --WAIT                     Optional. The number of minutes to wait for the command to complete. Default is –1 (no limit).
            #    --VERBOSE                  Optional. Indicates that you want verbose output from the deploy operation.
            #    --LOGLEVEL                 Optional. The logging level for this command invocation.
            sfdx force:mdapi:deploy -d "./mdapi-source/circle_build_$CIRCLE_BUILD_NUM" \
                                    -l RunLocalTests \
                                    -u PkgOrg \
                                    -w 15 \
                                    --verbose \
                                    --loglevel error
      - run:
          name: List current version history for the first-generation package about to be uploaded
          command: |
            #### List version info for all first-gen packages
            ## sfdx force:package1:version:list
            # -u --TARGETUSERNAME           Optional. A username or alias for the target org. Overrides the default target org.
            # -i --PACKAGEID                Optional. ID of the metadata package (starts with 033) we want version info from.
            #    --LOGLEVEL                 Optional. The logging level for this command invocation.
            sfdx force:package1:version:list  -u PkgOrg \
                                              -i $METADATA_PACKAGE_ID \
                                              --loglevel error
      - run:
          name: Create (upload) a new MANAGED BETA package version
          command: |
            #### Create a new MANAGED BETA package version
            ## sfdx force:package1:version:create
            # -i --PACKAGEID                Required. ID of the metadata package (starts with 033) of which you’re creating a new version.
            # -n --NAME                     Required. Package version name.
            # -d --DESCRIPTION              Optional. Package version description.
            # -u --TARGETUSERNAME           Optional. A username or alias for the target org. Overrides the default target org.
            # -w --WAIT                     Optional. The number of minutes to wait for the command to complete. Default is –1 (no limit).
            #    --LOGLEVEL                 Optional. The logging level for this command invocation.
            sfdx force:package1:version:create  -i $METADATA_PACKAGE_ID \
                                                -n "$PACKAGE_VERSION_NAME" \
                                                -d "Package version generated by CI process" \
                                                -u PkgOrg \
                                                -w 15 \
                                                --loglevel error

      # Store SFDX logs as artifacts
      - store_artifacts:
          path: ~/.sfdx/sfdx.log
          destination: sfdx-logs

####################################################################################################
## WORKFLOW:  build_and_test
## PURPOSE:   Primary workflow used by the CI process.
####################################################################################################
workflows:
  version: 2
  create_dev_scratch_org:
    jobs:
      - create-dev-scratch-org:
          # context: org-sbdevhub
          filters:
            branches:
              only:
                - /feature.*/
  # build_and_test:
  #   jobs:
  #     - build:
  #         # context: org-master
  #         filters:
  #           branches:
  #             only:
  #               - master
  create_beta_package:
    jobs:
      - create-beta-package:
          # context: org-preproduction
          filters:
          # ブランチのない、「v」から始まるタグに対してのみ実行します。
            tags:
              only:
                - /v.*/
            branches:
              ignore: /.*/
#END-OF-CONFIG-FILE#
